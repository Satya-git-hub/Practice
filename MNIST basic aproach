#MNIST basic aproach
#Softmax regression approach

import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist=input_data.read_data_sets("MNIST_data/", one_hot=True)

import tensorflow_datasets as tfds
type(mnist)

mnist.train.num_examples
mnist.test.num_examples

import matplotlib.pyplot as plt 
%matplotlib inline

single_image=mnist.train.images[0].reshape(28,28)
plt.imshow(single_image,cmap='gist_gray')

# PLACEHOLDER
x = tf.placeholder(tf.float32, shape=[None,784])

# VARIABLES
w = tf.Variable(tf.zeros([784,10]))
b = tf.Variable(tf.zeros([10]))

# GRAPH
y = tf.matmul(x,w) + b

# LOSS FUNCTION
y_true = tf.placeholder(tf.float32, [None,10])
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y))

# OPTIMIZER
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5)
train = optimizer.minimize(cross_entropy)

# CREATE SESSION

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    for steps in range(1000):
        batch_x, batch_y = mnist.train.next_batch(100)
        sess.run(train, feed_dict={x:batch_x,y_true:batch_y})
    
    #Evaluate the model
    #argmax >> gives the index position of the highest entry point for tensorflow it gives the highest entry point of a tensor along a axis
    correct_prediction = tf.equal(tf.arg_max(y,1), tf.arg_max(y_true,1))
    
    #[T,F,T,...]   --->>>   [1,0,1,...]
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    
    # tf.cast is converting my boolean values to floating points
    
    print(sess.run(accuracy,feed_dict={x:mnist.test.images , y_true: mnist.test.labels}))





























