import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re
from nltk import PorterStemmer
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

dataset = pd.read_csv('Restaurant_Reviews.tsv', sep ='\t', quoting =3)
corpus=[]

for i in range(0, dataset.Review.shape[0]):
        review = re.sub('[^a-zA-Z]', ' ', dataset.Review[i])
        review = review.lower()
        review = review.split()
        ps = PorterStemmer()
        review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
        review = ' '.join(review)                
        corpus.append(review)

cv = CountVectorizer(max_features=1500)
x = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, 1].values

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state = 0)
model = GaussianNB()
model.fit(xtrain, ytrain)
ypred = model.predict(xtest)

confusion_matrix(ytest,ypred)

accuracy_score(ytest, ypred)

'''
1. Run the other classification models we made in Part 3 - Classification, other than the one we used in the last tutorial.

2. Evaluate the performance of each of these models. Try to beat the Accuracy obtained in the tutorial. But remember, Accuracy is not enough, so you should also look at other performance metrics like Precision (measuring exactness), Recall (measuring completeness) and the F1 Score (compromise between Precision and Recall). Please find below these metrics formulas (TP = # True Positives, TN = # True Negatives, FP = # False Positives, FN = # False Negatives):

Accuracy = (TP + TN) / (TP + TN + FP + FN)

Precision = TP / (TP + FP)

Recall = TP / (TP + FN)

F1 Score = 2 * Precision * Recall / (Precision + Recall)

3. Try even other classification models that we haven't covered in Part 3 - Classification. Good ones for NLP include:

    CART
    C5.0
    Maximum Entropy
'''

